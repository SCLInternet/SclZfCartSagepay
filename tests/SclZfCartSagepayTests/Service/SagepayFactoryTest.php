<?php
namespace SclZfCartSagepayTests\Service;

use SclZfCartSagepay\Service\SagepayFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-15 at 17:30:38.
 */
class SagepayFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SagepayFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SagepayFactory;
    }

    /**
     * @covers SclZfCartSagepay\Service\SagepayFactory::createService
     */
    public function testCreateService()
    {
        $serviceLocator = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');

        $options = $this->getMockBuilder('SclZfCartSagepay\Options\SagepayOptions')
            ->disableOriginalConstructor()
            ->getMock();

        $serviceLocator->expects($this->at(0))
            ->method('get')
            ->with($this->equalTo('SclZfCartSagepay\Options\SagepayOptions'))
            ->will($this->returnValue($options));

        $cipher = $this->getMockBuilder('SclZfCartSagepay\Encryption\Cipher')
            ->disableOriginalConstructor()
            ->getMock();

        $serviceLocator->expects($this->at(1))
            ->method('get')
            ->with($this->equalTo('SclZfCartSagepay\Encryption\Cipher'))
            ->will($this->returnValue($cipher));

        $cryptData = $this->getMock('SclZfCartSagepay\Data\CryptData');

        $serviceLocator->expects($this->at(2))
            ->method('get')
            ->with($this->equalTo('SclZfCartSagepay\Data\CryptData'))
            ->will($this->returnValue($cryptData));

        $connOptions = $this->getMock('SclZfCartSagepay\Options\ConnectionOptions');

        $options->expects($this->any())
                ->method('getConnectionOptions')
                ->will($this->returnValue($connOptions));

        $urlBuilder = $this->getMock('SclZfUtilities\Route\UrlBuilder');

        $serviceLocator->expects($this->at(3))
            ->method('get')
            ->with($this->equalTo('SclZfUtilities\Route\UrlBuilder'))
            ->will($this->returnValue($urlBuilder));

        $sagepay = $this->object->createService($serviceLocator);

        $this->assertInstanceOf('SclZfCartSagepay\Sagepay', $sagepay);
    }
}
