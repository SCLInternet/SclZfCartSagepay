<?php
namespace SclZfCartSagepayTests;

use SclContact\Contact;
use SclZfCartSagepayTests\TestAssets\TestCustomerLocator;
use SclZfCartSagepay\Options\ConnectionOptions;
use SclZfCartSagepay\Options\SagepayOptions;
use SclZfCartSagepay\Sagepay;
use SclZfCartSagepay\Service\CryptService;
use SclZfCart\Entity\Order;
use Zend\Form\Form;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-15 at 17:30:38.
 */
class SagepayTest extends \PHPUnit_Framework_TestCase
{
    const TEST_NAME     = 'Sagepay Payment';
    const TEST_VERSION  = 2;
    const TEST_URL      = 'http://action-url.com';
    const TEST_ACCOUNT  = 'sagepay-account';
    const TEST_CURRENCY = 'GBP';
    const TEST_PASSWORD = 'top-secret';

    /**
     * @var Sagepay
     */
    private $sagepay;

    private $cipher;

    private $cryptService;

    private $urlBuilder;

    private $sequenceGenerator;

    private $customer;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->cryptService = $this->getMock('SclZfCartSagepay\Service\CryptService');

        $this->cipher = $this->getMock('SclZfCartSagepay\Encryption\Cipher');

        $this->urlBuilder = $this->getmock('SclZfUtilities\Route\UrlBuilder');

        $this->sequenceGenerator = $this->getMock(
            'SclZfSequenceGenerator\SequenceGeneratorInterface',
            array('get')
        );

        $this->customer = $this->createCustomer();

        $this->sagepay = new Sagepay(
            $this->createOptions(),
            $this->cipher,
            $this->cryptService,
            $this->urlBuilder,
            $this->sequenceGenerator,
            $this->customer
        );
    }

    public function test_service_manager_creates_instance()
    {
        TestCustomerLocator::setCustomer($this->customer);

        $this->assertInstanceOf(
            'SclZfCartSagepay\Sagepay',
            \TestBootstrap::getApplication()
                          ->getServiceManager()
                          ->get('SclZfCartSagepay\Sagepay')
        );
    }

    /*
     * name()
     */

    public function test_name_returns_the_name_of_the_module()
    {
        $this->assertEquals(self::TEST_NAME, $this->sagepay->name());
    }

    /*
     * updateCompleteForm()
     */

    public function test_updateCompleteForm_sets_the_form_action()
    {
        $form = new Form();

        $this->sagepay->updateCompleteForm(
            $form,
            new Order(),
            $this->getMock('SclZfCartPayment\Entity\PaymentInterface')
        );

        $this->assertEquals(self::TEST_URL, $form->getAttribute('action'));
    }

    public function test_updateCompleteForm_adds_VPSProtocol_element()
    {
        $this->assertUpdateCompleteFormAddsElement(self::TEST_VERSION, 'VPSProtocol');
    }

    public function test_updateCompleteForm_adds_TxType_element()
    {
        $this->assertUpdateCompleteFormAddsElement('PAYMENT', 'TxType');
    }

    public function test_updateCompleteForm_adds_Vendor_element()
    {
        $this->assertUpdateCompleteFormAddsElement(self::TEST_ACCOUNT, 'Vendor');
    }

    public function test_updateCompleteForm_creates_success_url()
    {
        $this->urlBuilder
             ->expects($this->at(0))
             ->method('getUrl')
             ->with($this->equalTo('scl-zf-cart-sagepay/success'));

        $this->sagepay->updateCompleteForm(
            new Form(),
            new Order(),
            $this->getMock('SclZfCartPayment\Entity\PaymentInterface')
        );
    }

    public function test_updateCompleteForm_creates_failure_url()
    {
        $this->urlBuilder
             ->expects($this->at(1))
             ->method('getUrl')
             ->with($this->equalTo('scl-zf-cart-sagepay/failure'));

        $this->sagepay->updateCompleteForm(
            new Form(),
            new Order(),
            $this->getMock('SclZfCartPayment\Entity\PaymentInterface')
        );
    }

    public function test_updateCompleteForm_createCryptData()
    {
        $order = new Order();

        $this->sequenceGenerator
             ->expects($this->once())
             ->method('get')
             ->will($this->returnValue(7));

        $this->urlBuilder
             ->expects($this->at(0))
             ->method('getUrl')
             ->will($this->returnValue('/success'));

        $this->urlBuilder
             ->expects($this->at(1))
             ->method('getUrl')
             ->will($this->returnValue('/failure'));

        $this->cryptService
             ->expects($this->once())
             ->method('createCryptData')
             ->with(
                $this->identicalTo($order),
                $this->identicalTo($this->customer),
                $this->equalTo('TEST-SCL-TX-7'),
                $this->equalTo(self::TEST_CURRENCY),
                $this->equalTo('http://scl.co.uk/success'),
                $this->equalTo('http://scl.co.uk/failure')
             );

        $this->sagepay->updateCompleteForm(
            new Form(),
            $order,
            $this->getMock('SclZfCartPayment\Entity\PaymentInterface')
        );
    }

    public function test_updateCompleteForm_encrypts_crypt_data()
    {
        $cryptString = 'very-secret-data';

        $this->cryptService
             ->expects($this->any())
             ->method('createCryptData')
             ->will($this->returnValue($cryptString));

        $this->cipher
             ->expects($this->once())
             ->method('encrypt')
             ->with($this->equalTo($cryptString), $this->equalTo(self::TEST_PASSWORD));

        $this->sagepay->updateCompleteForm(
            new Form(),
            new Order(),
            $this->getMock('SclZfCartPayment\Entity\PaymentInterface')
        );
    }

    public function test_updateCompleteForm_adds_Crypt_element()
    {
        $encryptedData = '010101010101';

        $this->cipher
             ->expects($this->any())
             ->method('encrypt')
             ->will($this->returnValue($encryptedData));

        $this->assertUpdateCompleteFormAddsElement($encryptedData, 'Crypt');
    }

    /*
     * complete()
     */

    /*
    public function test_complete()
    {
    }
    */

    /*
     * Private methods()
     */

    private function createOptions()
    {
        $options = new SagepayOptions();

        $options->setLive(true);
        $options->setName(self::TEST_NAME);
        $options->setVersion(self::TEST_VERSION);
        $options->setAccount(self::TEST_ACCOUNT);
        $options->setCurrency(self::TEST_CURRENCY);

        $connectionOptions = new ConnectionOptions();

        $connectionOptions->setUrl(self::TEST_URL);
        $connectionOptions->setPassword(self::TEST_PASSWORD);

        $options->setLiveConnection($connectionOptions);
        $options->setTestConnection($connectionOptions);

        return $options;
    }

    private function createCustomer()
    {
        $customer = $this->getMock('SclZfCart\Customer\CustomerInterface');

        $contact = new Contact();

        $customer->expects($this->any())
                 ->method('getContact')
                 ->will($this->returnValue($contact));

        return $customer;
    }

    private function assertUpdateCompleteFormAddsElement($expectedValue, $elementName)
    {
        $form = new Form();

        $this->sagepay->updateCompleteForm(
            $form,
            new Order(),
            $this->getMock('SclZfCartPayment\Entity\PaymentInterface')
        );

        $element = $form->get($elementName);

        $this->assertEquals($expectedValue, $element->getValue());
    }
}
