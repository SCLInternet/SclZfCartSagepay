<?php
namespace SclZfCartSagepay\Service;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-15 at 17:30:38.
 */
class SagepayFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SagepayFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SagepayFactory;
    }

    /**
     * @covers SclZfCartSagepay\Service\SagepayFactory::createService
     */
    public function testCreateService()
    {
        $serviceLocator = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');

        $dataProvider = $this->getMockBuilder('SclZfCartSagepay\Data\Config')
            ->disableOriginalConstructor()
            ->getMock();

        $serviceLocator->expects($this->at(0))
            ->method('get')
            ->with($this->equalTo('SclZfCartSagepay\Data\Config'))
            ->will($this->returnValue($dataProvider));

        $blockCipher = $this->getMockBuilder('Zend\Crypt\BlockCipher')
            ->disableOriginalConstructor()
            ->getMock();

        $serviceLocator->expects($this->at(1))
            ->method('get')
            ->with($this->equalTo('SclZfCartSagepay\BlockCipher'))
            ->will($this->returnValue($blockCipher));

        $cryptData = $this->getMock('SclZfCartSagepay\Data\CryptData');

        $serviceLocator->expects($this->at(2))
            ->method('get')
            ->with($this->equalTo('SclZfCartSagepay\Data\CryptData'))
            ->will($this->returnValue($cryptData));

        $sagepay = $this->object->createService($serviceLocator);

        $this->assertInstanceOf('SclZfCartSagepay\Sagepay', $sagepay);
    }
}
